name: calibre-image-actions Docker

on:
  push:
    branches:
      - main

    paths:
      - ".github/workflows/calibre-image-actions.yml"
      - "calibre-image-actions/**"

    # Publish `v1.2.3` tags as releases.
    #tags:
    #  - v*

  # Run tests for any PRs.
  pull_request:

permissions:
  packages: write

env:
  IMAGE_NAME: calibre-image-actions

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run tests
        working-directory: calibre-image-actions
        run: |
          #if [ -f docker-compose.test.yml ]; then
          #  docker-compose --file docker-compose.test.yml build
          #  docker-compose --file docker-compose.test.yml run test
          #else
          docker build . --file Dockerfile
          #fi
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Build image
        working-directory: calibre-image-actions
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Push image
        working-directory: calibre-image-actions
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "$default-branch" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
